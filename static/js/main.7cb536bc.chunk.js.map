{"version":3,"sources":["Components/SearchBar.jsx","Components/Navbar.jsx","Components/Jumbotron.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SearchBar","state","searchInput","event","console","log","this","setState","target","value","preventDefault","props","handleSearch","className","onSubmit","bind","type","placeholder","aria-label","onChange","inputChange","Component","Navbar","href","data-toggle","data-target","aria-controls","aria-expanded","id","Jumbotron","App","employees","input","axios","get","then","response","data","results","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oQA8CeA,E,4MA1CXC,MAAQ,CACJC,YAAa,M,0DAGLC,GACRC,QAAQC,IAAIF,GACZG,KAAKC,SAAS,CACXL,YAAaC,EAAMK,OAAOC,U,mCAIpBN,GACTA,EAAMO,iBACNJ,KAAKK,MAAMC,aAAaN,KAAKL,MAAMC,e,+BAMnC,OACI,0BACIW,UAAU,2BACVC,SAAUR,KAAKM,aAAaG,KAAKT,OAEjC,2BACIO,UAAU,uBACVG,KAAK,SACLC,YAAY,SACZC,aAAW,SACXC,SAAUb,KAAKc,YAAYL,KAAKT,QAEpC,4BACIO,UAAU,gDACVG,KAAK,UAFT,e,GAjCQK,aC0CTC,E,uKApCP,OACI,6BACI,yBAAKT,UAAU,yCACX,uBAAGA,UAAU,0BAA0BU,KAAK,KAA5C,OAGA,4BACIV,UAAU,iBACVG,KAAK,SACLQ,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdT,aAAW,qBAEX,0BAAML,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2Be,GAAG,0BACzC,wBAAIf,UAAU,sBACV,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWU,KAAK,KAA7B,UAKR,kBAAC,EAAD,CAAWX,aAAcN,KAAKK,MAAMC,iBAG5C,6BACA,kDACA,uF,GAjCKS,aC6BNQ,E,uKA7BP,OACQ,yBAAKhB,UAAU,aACf,+BACI,4BACI,qCACA,oCACA,6CACA,qCACA,sCACA,4CACA,uCACA,8CAEJ,4BACI,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,oC,GAxBAQ,a,ICoCTS,E,4MA3BX7B,MAAQ,CACJ8B,UAAW,I,EAGfnB,aAAe,SAACoB,GAEZC,IAAMC,IAAI,yCACTC,MAAK,SAACC,GACHhC,QAAQC,IAAI,CAAC+B,aACb,EAAK7B,SAAS,CACVwB,UAAWK,EAASC,KAAKC,c,uDAMjC,OACI,6BACI,kBAAC,EAAD,CAAQ1B,aAAcN,KAAKM,eAC3B,kBAAC,EAAD,CACImB,UAAWzB,KAAKL,MAAM8B,iB,GAtBxBV,aCGEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.7cb536bc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SearchBar extends Component {\n\n    state = {\n        searchInput: null\n    }\n\n    inputChange(event) {\n        console.log(event);\n        this.setState({\n           searchInput: event.target.value\n        })\n    }\n\n    handleSearch(event){\n        event.preventDefault();\n        this.props.handleSearch(this.state.searchInput)\n    }\n\n  \n\n    render() {\n        return(\n            <form \n                className=\"form-inline my-2 my-lg-0\"\n                onSubmit={this.handleSearch.bind(this)}\n            >\n                <input\n                    className=\"form-control mr-sm-2\"\n                    type=\"search\"\n                    placeholder=\"Search\"\n                    aria-label=\"Search\"\n                    onChange={this.inputChange.bind(this)}\n                />\n                <button \n                    className=\"btn btn-outline-light my-2 my-sm-0 text-white\" \n                    type=\"submit\"\n                    >\n                    Search\n                </button>\n            </form>\n        )\n    }\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport SearchBar from \"./SearchBar\";\n\nclass Navbar extends Component {\n    \n    render() {\n        return(\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-light \">\n                    <a className=\"navbar-brand text-white\" href=\"/\">\n                        DIR\n                    </a>\n                    <button\n                        className=\"navbar-toggler\"\n                        type=\"button\"\n                        data-toggle=\"collapse\"\n                        data-target=\"#navbarSupportedContent\"\n                        aria-controls=\"navbarSupportedContent\"\n                        aria-expanded=\"false\"\n                        aria-label=\"Toggle navigation\"\n                    >\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link\" href=\"/\">\n                                Link\n                                </a>\n                            </li>\n                        </ul>\n                        <SearchBar handleSearch={this.props.handleSearch}/>\n                    </div>\n                </nav>\n                <br/>\n                <h1>Employee Directory</h1>\n                <h5>Please use this to keep a track of your employees.</h5>\n            </div>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\n\nclass Jumbotron extends Component {\n    \n    render() {\n        return(\n                <div className=\"jumbotron\">\n                <table>\n                    <tr>\n                        <th>Image</th>\n                        <th>Name</th>\n                        <th>Date of Birth</th>\n                        <th>Email</th>\n                        <th>Gender</th>\n                        <th>Phone Number</th>\n                        <th>Address</th>\n                        <th>Login Details</th>\n                    </tr>\n                    <tr>\n                        <td>{}</td>\n                        <td>{}</td>\n                        <td>{}</td>\n                        <td>{}</td>\n                        <td>{}</td>\n                        <td>{}</td>\n                        <td>{}</td>\n                        <td>{}</td>\n                    </tr>\n                </table>\n                </div>\n        )\n    }\n}\n\nexport default Jumbotron;","import React, { Component } from 'react';\n\nimport Navbar from './Components/Navbar';\nimport Jumbotron from './Components/Jumbotron';\nimport {sortNameAscend, sortNameDescend} from \"./Components/sortEmployeesUtil\";\n\nimport axios from \"axios\";\n\n\nclass App extends Component{\n\n    state = {\n        employees: []\n    }\n\n    handleSearch = (input) => {\n        // axios call\n        axios.get(\"https://randomuser.me/api?results=100\")\n        .then((response) => {\n            console.log({response});\n            this.setState({\n                employees: response.data.results\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar handleSearch={this.handleSearch}/>\n                <Jumbotron \n                    employees={this.state.employees}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}